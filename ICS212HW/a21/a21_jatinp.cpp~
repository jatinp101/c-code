/**
 * Complex class with overloaded operators using example code
 * @author Jatin Pandya
 * @since 4/4/2018
 */

#include <iostream>
using namespace std;

// complex number class definition
class Complex {

public:
  // constant for 0
  static const double ZERO = 0;

  Complex() {
    a = ZERO;
    b = ZERO;
  }
  //Constructor initializes real and imaginary numbers
  Complex(double real, double imag){       
    //reusing the set function 
    set(real, imag); 
  }   
  
  //copy constructor - makes a copy of complex
  Complex(const Complex &complex){         
    set(complex.a, complex.b);      
  }  
  
  //setting both a and b
  void set (double one, double two) {
    a = one;
    b = two;
  }
  //Setting a
  void setReal(double num){
    a = num;
  }
  //Setting B
  void setImaginary(double imag){
    //re-use code!
    set(a, imag);
  }
  // returning real and imaginary numbers
  double getReal() const{
    return a;
  } 
  double getImaginary() const{
    return b;
  }
  //more member functions
  Complex add(const Complex &complex){
    double real3 = a + complex.a;
    double imag3 = b + complex.b;
    Complex complex3(real3, imag3);
    return complex3;
  }
  
  Complex subtract(const Complex &complex){
    double real3 = a - complex.a;
    double imag3 = b - complex.b;
    Complex complex3(real3, imag3);
    return complex3;
  }

  //(a + bi) * (c + di) = (a*c - b*d) + (b*c + a*d)i
  Complex multiply(const Complex &complex){
    double real3 = (a * complex.a)  - (b * complex.b);
    double imag3 = (b * complex.a) + (a * complex.b);
    Complex complex3(real3, imag3);
    return complex3;
  }

  //(a*c + b*d)/(c*c + d*d) + (b*c - a*d)/(c*c + d*d)i
  Complex divide(const Complex &complex){
    double temp = ((complex.a * complex.a) + (complex.b * complex.b));
    double real3 = ((a * complex.a) + (b * complex.b)) / temp;
    double imag3 = ((b * complex.a) - (a * complex.b)) / temp;
    Complex complex3(real3, imag3);
    return complex3;
  }
  const Complex &operator=(const Complex &complex){
    set(complex.a, complex.b);
    return *this; /* "*this" is the current object (on left)*/    
  }

  Complex operator+ (const Complex &complex) {
   return this->add(complex);
  }

  Complex operator- (const Complex &complex) {
    Complex temp(a,b);
    Complex c3;
    c3 = temp.subtract(complex);
    return c3;
  }
  Complex operator* (const Complex &complex) {
    Complex temp(a,b);
    Complex c3;
    c3 = temp.multiply(complex);
    return c3;
  }
  Complex operator/ (const Complex &complex) {
    Complex temp(a,b);
    Complex c3;
    c3 = temp.divide(complex);
    return c3;
  }

  friend istream &operator>>(istream &input, Complex &complex){
    char plus = 'p';//doesn't matter what it is set to
    char i = 'i';
    input>>complex.a>>plus>>complex.b>>i;
    //error checking
    complex.set(complex.a, complex.b);
    return input;
  }

  friend ostream &operator<<(ostream &output, const Complex &complex){
    output<<complex.a<<'+'<<complex.b<<'i';
    return output;
  }

  bool operator == (const Complex &complex) {
    bool temp = true;
    if (a == complex.a) {
      if (b == complex.b)
	return temp;
      temp = false;
      return temp;
    }
    temp = false;
    return temp;
  }

  bool operator != (const Complex &complex) {
    bool temp = false;
    if (a == complex.a) {
      if (b == complex.b)
        return temp;
      temp = true;
      return temp;
    }
    temp = true;
    return temp;
  }

  // printing complex numbers
  void print() const{      
    cout << a << " + " << b << "i";
  }
  ~Complex() {       
    cout<<"Destructor ("<<a<<" + "<< b <<"i" << ")"<<endl;      
  } 
private:
  double a;
  double b;
};

int main (void) {
  // variables
  Complex c1;
  Complex c2;
  Complex c3;
  bool temp;

  cout << "Enter a Complex number in the form 'a+bi': " << endl;
  cin >> c1;
  cout << "Enter another Complex number in the form 'a+bi':" << endl;
  cin >> c2;

  cout << "Test the + operator: " << endl;
  c3 = c1 + c2;

  cout << c1 << " + " << c2 << " = " << c3 << endl;

  cout << "Test the - operator: " << endl;

  c3 = c1 - c2;
  cout << c1 << " - " << c2 << " = " << c3 << endl;


  cout << "Test the * operator: " << endl;

  c3 = c1 * c2;

  cout << c1 << " * " << c2 << " = " << c3 << endl;

  cout << "Test the / operator: " << endl;

  c3 = c1 / c2;

  cout << c1 << " / " << c2 << " = " << c3 << endl;

  cout << "Test the == operator: " << endl;

  temp = c1 == c2;

  cout << c1 << " == " << c2 << " = " << boolalpha << temp << endl;

  cout << "Test the != operator: " << endl;

  temp = c1 != c2;

  cout << c1 << " != " << c2 << " = " << boolalpha << temp << endl;

  return 0;
}
